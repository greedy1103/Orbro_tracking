"""
Person Detection Module using YOLOv8
Ph√°t hi·ªán ng∆∞·ªùi trong video s·ª≠ d·ª•ng m√¥ h√¨nh YOLOv8
"""

import cv2
import numpy as np
from ultralytics import YOLO
from typing import List, Tuple, Dict, Any
import os

class PersonDetector:
    def __init__(self, model_path: str = 'yolov8n.pt', confidence_threshold: float = 0.5):
        """
        Kh·ªüi t·∫°o detector v·ªõi m√¥ h√¨nh YOLOv8
        
        Args:
            model_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn m√¥ h√¨nh YOLOv8
            confidence_threshold: Ng∆∞·ª°ng tin c·∫≠y cho detection
        """
        # T·ª± ƒë·ªông t·∫£i model n·∫øu kh√¥ng t·ªìn t·∫°i
        if not os.path.exists(model_path):
            print(f"‚ö†Ô∏è Model '{model_path}' kh√¥ng t·ªìn t·∫°i. ƒêang t·ª± ƒë·ªông t·∫£i xu·ªëng...")
            try:
                YOLO(model_path) # Th∆∞ vi·ªán ultralytics s·∫Ω t·ª± t·∫£i model
                print(f"‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng model '{model_path}'.")
            except Exception as e:
                print(f"‚ùå L·ªói nghi√™m tr·ªçng khi t·∫£i model: {e}")
                print("üí° Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i.")
                # C√≥ th·ªÉ raise exception ·ªü ƒë√¢y ƒë·ªÉ d·ª´ng ch∆∞∆°ng tr√¨nh n·∫øu model l√† b·∫Øt bu·ªôc
                raise e

        self.model = YOLO(model_path)
        self.confidence_threshold = confidence_threshold
        self.person_class_id = 0  # Class ID cho ng∆∞·ªùi trong COCO dataset
        
    def detect_persons(self, frame: np.ndarray) -> List[Dict[str, Any]]:
        """
        Ph√°t hi·ªán ng∆∞·ªùi trong khung h√¨nh
        
        Args:
            frame: Khung h√¨nh ƒë·∫ßu v√†o (BGR format)
            
        Returns:
            List c√°c detection v·ªõi th√¥ng tin bbox, confidence
        """
        results = self.model(frame, verbose=False)
        detections = []
        
        for result in results:
            boxes = result.boxes
            if boxes is not None:
                for i in range(len(boxes)):
                    # Ch·ªâ l·∫•y detections c·ªßa ng∆∞·ªùi (class_id = 0)
                    if int(boxes.cls[i]) == self.person_class_id:
                        confidence = float(boxes.conf[i])
                        
                        if confidence >= self.confidence_threshold:
                            # L·∫•y t·ªça ƒë·ªô bbox
                            x1, y1, x2, y2 = boxes.xyxy[i].cpu().numpy()
                            
                            detection = {
                                'bbox': [int(x1), int(y1), int(x2), int(y2)],
                                'confidence': confidence,
                                'class_id': self.person_class_id,
                                'center': [int((x1 + x2) / 2), int((y1 + y2) / 2)]
                            }
                            detections.append(detection)
        
        return detections
    
    def draw_detections(self, frame: np.ndarray, detections: List[Dict[str, Any]]) -> np.ndarray:
        """
        V·∫Ω c√°c detection l√™n khung h√¨nh
        
        Args:
            frame: Khung h√¨nh g·ªëc
            detections: List c√°c detection
            
        Returns:
            Khung h√¨nh ƒë√£ v·∫Ω detection
        """
        frame_copy = frame.copy()
        
        for det in detections:
            bbox = det['bbox']
            confidence = det['confidence']
            
            # V·∫Ω bounding box
            cv2.rectangle(frame_copy, (bbox[0], bbox[1]), (bbox[2], bbox[3]), (0, 255, 0), 2)
            
            # V·∫Ω confidence score
            label = f"Person: {confidence:.2f}"
            label_size = cv2.getTextSize(label, cv2.FONT_HERSHEY_SIMPLEX, 0.5, 2)[0]
            cv2.rectangle(frame_copy, (bbox[0], bbox[1] - label_size[1] - 10), 
                         (bbox[0] + label_size[0], bbox[1]), (0, 255, 0), -1)
            cv2.putText(frame_copy, label, (bbox[0], bbox[1] - 5), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 2)
        
        return frame_copy